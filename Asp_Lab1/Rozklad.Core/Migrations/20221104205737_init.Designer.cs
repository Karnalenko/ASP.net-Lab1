// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rozklad.Core;

#nullable disable

namespace Rozklad.Core.Migrations
{
    [DbContext(typeof(RozkladContext))]
    [Migration("20221104205737_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b4788677-bceb-4b4e-9681-c5fd6a191457",
                            ConcurrencyStamp = "cd67d0a1-8c9e-4e05-b416-c7ab01214ff0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9c946f41-54b1-40c2-99a8-8bebcf5040c3",
                            ConcurrencyStamp = "cf9d18e3-4609-44de-8f60-fe15ea3b48fb",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4d45a300-2822-461c-8998-833fff9eda30",
                            RoleId = "b4788677-bceb-4b4e-9681-c5fd6a191457"
                        },
                        new
                        {
                            UserId = "4d45a300-2822-461c-8998-833fff9eda30",
                            RoleId = "9c946f41-54b1-40c2-99a8-8bebcf5040c3"
                        },
                        new
                        {
                            UserId = "74aab0ae-950b-46ba-be5d-ed5956d08510",
                            RoleId = "9c946f41-54b1-40c2-99a8-8bebcf5040c3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Rozklad.Core.BusRoute", b =>
                {
                    b.Property<int>("BusrouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusrouteId"), 1L, 1);

                    b.Property<string>("IntermediateStops")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfArrival")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfDeparture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusrouteId");

                    b.ToTable("BusRoutes");

                    b.HasData(
                        new
                        {
                            BusrouteId = 1,
                            IntermediateStops = "gremzc",
                            PlaceOfArrival = "Рівне",
                            PlaceOfDeparture = "Острог"
                        });
                });

            modelBuilder.Entity("Rozklad.Core.BusShedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusrouteId")
                        .HasColumnType("int");

                    b.Property<float?>("Cost")
                        .HasColumnType("real");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Seats")
                        .HasColumnType("int");

                    b.Property<int>("buyTicketId")
                        .HasColumnType("int");

                    b.Property<int>("carrierId")
                        .HasColumnType("int");

                    b.Property<int>("statusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusrouteId");

                    b.HasIndex("buyTicketId");

                    b.HasIndex("carrierId");

                    b.HasIndex("statusId");

                    b.ToTable("BusShedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalTime = new DateTime(2022, 7, 20, 20, 30, 25, 0, DateTimeKind.Unspecified),
                            BusrouteId = 1,
                            Cost = 75f,
                            DepartureTime = new DateTime(2022, 7, 20, 18, 30, 25, 0, DateTimeKind.Unspecified),
                            Seats = 30,
                            buyTicketId = 1,
                            carrierId = 1,
                            statusId = 1
                        });
                });

            modelBuilder.Entity("Rozklad.Core.BuyTicket", b =>
                {
                    b.Property<int>("buyTicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("buyTicketId"), 1L, 1);

                    b.Property<int>("AllPrice")
                        .HasColumnType("int");

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomerTel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cardId")
                        .HasColumnType("int");

                    b.Property<int>("numTicket")
                        .HasColumnType("int");

                    b.HasKey("buyTicketId");

                    b.HasIndex("cardId");

                    b.ToTable("BuyTickets");

                    b.HasData(
                        new
                        {
                            buyTicketId = 1,
                            AllPrice = 125,
                            BuyerName = "ilas",
                            NomerTel = "78685895",
                            cardId = 1,
                            numTicket = 3
                        });
                });

            modelBuilder.Entity("Rozklad.Core.Card", b =>
                {
                    b.Property<int>("cardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cardId"), 1L, 1);

                    b.Property<string>("CVC_kod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomerCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cardId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            cardId = 1,
                            CVC_kod = "234",
                            DateEnd = "01/26",
                            NomerCard = "3t46363477"
                        });
                });

            modelBuilder.Entity("Rozklad.Core.Carrier", b =>
                {
                    b.Property<int>("carrierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("carrierId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Transport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("carrierId");

                    b.ToTable("Carriers");

                    b.HasData(
                        new
                        {
                            carrierId = 1,
                            Name = "Ilias",
                            Transport = "autobus"
                        });
                });

            modelBuilder.Entity("Rozklad.Core.MapsRoute", b =>
                {
                    b.Property<int?>("mapsRouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("mapsRouteId"), 1L, 1);

                    b.Property<float>("CoordinateOfArrival")
                        .HasColumnType("real");

                    b.Property<float>("CoordinateOfDeparture")
                        .HasColumnType("real");

                    b.HasKey("mapsRouteId");

                    b.ToTable("MapsRoutes");

                    b.HasData(
                        new
                        {
                            mapsRouteId = 1,
                            CoordinateOfArrival = 434f,
                            CoordinateOfDeparture = 123f
                        });
                });

            modelBuilder.Entity("Rozklad.Core.Status", b =>
                {
                    b.Property<int>("statusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("statusId"), 1L, 1);

                    b.Property<string>("StatusValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("statusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            statusId = 1,
                            StatusValue = "В дорозі"
                        });
                });

            modelBuilder.Entity("Rozklad.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4d45a300-2822-461c-8998-833fff9eda30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c2a68970-3e2b-4440-a0aa-16cc0ba49bad",
                            Email = "admin@rozklad.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ROZKLAD.COM",
                            NormalizedUserName = "ADMIN@ROZKLAD.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFYtXi3B4oZppcHeMUEr8IfkxyBHFr/yhfveOXNERU+XQqrYjhPhu+/VV60llQGFkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7560ed76-5f22-48e1-a0e0-63e0c1b1317c",
                            TwoFactorEnabled = false,
                            UserName = "admin@rozklad.com"
                        },
                        new
                        {
                            Id = "74aab0ae-950b-46ba-be5d-ed5956d08510",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7e5037e-b11b-4e79-89fe-d98f58716d12",
                            Email = "user@rozklad.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@ROZKLAD.COM",
                            NormalizedUserName = "USER@ROZKLAD.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN43IU/5gBaqj9vAXuBFOs+7tgNwTP8BXpfXp6PDYc24yBAc0TUWdimxl/e+x4Yymg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6f3607a-7f17-4d37-8e5f-991d96df3e20",
                            TwoFactorEnabled = false,
                            UserName = "user@rozklad.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Rozklad.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Rozklad.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rozklad.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Rozklad.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rozklad.Core.BusShedule", b =>
                {
                    b.HasOne("Rozklad.Core.BusRoute", "Busroute")
                        .WithMany("BusShedules")
                        .HasForeignKey("BusrouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rozklad.Core.BuyTicket", "buyTicket")
                        .WithMany("BusShedules")
                        .HasForeignKey("buyTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rozklad.Core.Carrier", "carrier")
                        .WithMany("BusShedules")
                        .HasForeignKey("carrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rozklad.Core.Status", "status")
                        .WithMany("BusShedules")
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Busroute");

                    b.Navigation("buyTicket");

                    b.Navigation("carrier");

                    b.Navigation("status");
                });

            modelBuilder.Entity("Rozklad.Core.BuyTicket", b =>
                {
                    b.HasOne("Rozklad.Core.Card", "card")
                        .WithMany("BuyTickets")
                        .HasForeignKey("cardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("card");
                });

            modelBuilder.Entity("Rozklad.Core.BusRoute", b =>
                {
                    b.Navigation("BusShedules");
                });

            modelBuilder.Entity("Rozklad.Core.BuyTicket", b =>
                {
                    b.Navigation("BusShedules");
                });

            modelBuilder.Entity("Rozklad.Core.Card", b =>
                {
                    b.Navigation("BuyTickets");
                });

            modelBuilder.Entity("Rozklad.Core.Carrier", b =>
                {
                    b.Navigation("BusShedules");
                });

            modelBuilder.Entity("Rozklad.Core.Status", b =>
                {
                    b.Navigation("BusShedules");
                });
#pragma warning restore 612, 618
        }
    }
}
